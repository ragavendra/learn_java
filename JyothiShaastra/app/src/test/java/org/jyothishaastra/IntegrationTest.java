/*
 * This source file was generated by the Gradle 'init' task
 */
package org.jyothishaastra;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.Calendar;

class IntegraionTest {

	// for 23 Oct 2025
    @Test void all() throws Exception {

		// India Ephemersis doesnt have Ayanamsha
		Calendar date = Calendar.getInstance();
		// date.set(2009, 7, 15); // for 15 July 2009
		double ayanamsha = Ayanaamsha.ayanamsha(date);

		// expected: <24.21711081408956> but was: <24.21834538198289>
		// assertEquals(24.21711081408956, ayanamsha);

		// Mesha is 1
		int surRaashi = 7;
		int chaRaashi = 8;
		int swissEphermesisMoon[] = { 4, 7, 00 };
		int ar1[] = { 4, 7, 0 }; // of next day's which is in Mesha raashi 9
		int ar2[] = { 16, 1, 0 }; // of next day's which is in Mesha raashi 9
		int swissEphermesisSun[] = { 28, 50, 42 };
		int ar3[] = { 28, 50, 42 };
		int ar4[] = { 29, 50, 25 };

		int chandraAbs[] = swissEphermesisMoon;
		chandraAbs[0] = DegMinSec.absGeo(chaRaashi, swissEphermesisMoon);

		int sooryaAbs[] = swissEphermesisSun;
		sooryaAbs[0] = DegMinSec.absGeo(surRaashi, swissEphermesisSun);
        // System.out.printf("Abs geo of Surya is %d & Chandra is %d\n", sooryaAbs[0], chandraAbs[0]);

		assertEquals(208, sooryaAbs[0]);
		assertEquals(214, chandraAbs[0]);
		System.out.printf("Tithi is %s and remaining distance is %4.9f.\n", Tithi.tithi(chandraAbs, sooryaAbs), Tithi.remainingDistance);

				/*uncomment when Chandra has moved to next Raashi 
		  ar1[0] = DegMinSec.absGeo(chaRaashi, ar1);
		  chaRaashi = chaRaashi + 1; // since it is moving to Mesha 9 raashi
		  ar2[0] = DegMinSec.absGeo(chaRaashi, ar2);
		*/

        int chaMot[] = DegMinSec.minus(ar2, ar1);
		// System.out.printf("Daily motion of Chandra is %s\n", Arrays.toString(chaMot));

        int surMot[] = DegMinSec.minus(ar4, ar3);
		// System.out.printf("Daily motion of Soorya is %s\n", Arrays.toString(surMot));

        // Time taken to cover remainingDistance
        System.out.printf("Tithi ends at %s from 5:30 IST or minus from 7am in PST?\n", Arrays.toString(DegMinSec.getGeoCoordsFromDegree(Tithi.end(surMot, chaMot, Tithi.remainingDistance))));

		assertTrue(Tithi.tithi(chandraAbs, sooryaAbs).contains("Padya"));
		assertArrayEquals(new int[]{14, 48, 30}, DegMinSec.getGeoCoordsFromDegree(Tithi.end(surMot, chaMot, Tithi.remainingDistance)));

/* 

Aya is 24.21711081408956 degrees
Abs geo of Surya is 208 & Chandra is 214
Tithi is  - Padya - 5.271666667 deg have elapsed and remaining distance is 6.728333333.
Tithi ends at [14, 48, 30] from 5:30 IST or minus from 7am in PST?
Karana is Kimstugna - 5.271666667 deg have elapsed and remaining distance is 0.728333333.
Raashi is Vrishika - 4.116666667 deg have elapsed and remaining distance is 25.883333333.
Chandra deg is 214.116666667
Nakshatra is Anuradha - 0.783333333 deg have elapsed and remaining distance is 12.550000000.
Nakshatra ends at [13, 34, 11] from 5:30 IST or minus from 7am in PST?


		System.out.printf("Karana is %s and remaining distance is %4.9f.\n", Karana.karana(chandraAbs, sooryaAbs), Karana.remainingDistance);
        // System.out.printf("Karana ends at %s from 5:30 IST or minus from 7am in PST?\n", Arrays.toString(DegMinSec.getGeoCoordsFromDegree(Karana.tithiEnd(surMot, chaMot, Tithi.remainingDistance))));
	
		int surNir[] = DegMinSec.getGeoCoordsFromDegree(Ayanamsha.nirayaana(ayanamsha, sooryaAbs));
		// System.out.printf("Soorya niraayana on %s from Swiss is %s\n", date.getTime(), Arrays.toString(surNir));	

		int[] chaNir = DegMinSec.getGeoCoordsFromDegree(Ayanamsha.nirayaana(ayanamsha, chandraAbs));
		// System.out.printf("Chandra niraayana on %s from Swiss is %s\n", date.getTime(), Arrays.toString(chaNir));	

		System.out.printf("Raashi is %s and remaining distance is %4.9f.\n", Raashi.raashi(chandraAbs), Raashi.remainingDistance);
        // System.out.printf("Raashi ends at %s from 5:30 IST or minus from 7am in PST?\n", Arrays.toString(DegMinSec.getGeoCoordsFromDegree(Raashi.tithiEnd(surMot, chaMot, Tithi.remainingDistance))));
		System.out.printf("Nakshatra is %s and remaining distance is %4.9f.\n", Nakshatra.nakshatra(chaNir), Nakshatra.remainingDistance);
        System.out.printf("Nakshatra ends at %s from 5:30 IST or minus from 7am in PST?\n", Arrays.toString(DegMinSec.getGeoCoordsFromDegree(Nakshatra.end(chaMot, Tithi.remainingDistance))));
		*/
    }
}
